# Generated by Django 4.2.11 on 2024-05-16 13:33

import functools

from django.conf import settings
from django.core.cache import caches
from django.db import migrations
from django.db.migrations.state import StateApps
from django.utils import translation
from django.utils.encoding import force_str

import tinymce.models

import openforms.config.models.config
import openforms.emails.validators
import openforms.template.validators


def set_correct_default_templates(apps: StateApps, _):
    """
    Set up the correct default co-sign request templates.

    This data migration does two things:

    1. Ensure that each localized field name has the correct localized content, since
       migrations don't use the real fields which use translation.overide to get the
       default value.
    2. Update the template to take into account the (legacy)
       show_form_link_in_cosign_email config option.
    """
    GlobalConfiguration = apps.get_model("config", "GlobalConfiguration")
    if not GlobalConfiguration.objects.exists():
        return

    _render = openforms.config.models.config._render
    config = GlobalConfiguration.objects.get()
    context = {"omit_form_link": not config.show_form_link_in_cosign_email}

    for lang_code, _ in settings.LANGUAGES:
        field_name = f"cosign_request_template_{lang_code}"
        with translation.override(lang_code):
            default_value = _render("emails/co_sign/request.html", context=context)
            setattr(config, field_name, force_str(default_value))

    config.save()
    caches[settings.SOLO_CACHE].clear()


class Migration(migrations.Migration):

    dependencies = [
        ("config", "0057_migrate_to_order_id_template"),
    ]

    operations = [
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_request_template",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{},
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'form_url' and 'code'.",
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_request_template_en",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{},
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'form_url' and 'code'.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.AddField(
            model_name="globalconfiguration",
            name="cosign_request_template_nl",
            field=tinymce.models.HTMLField(
                default=functools.partial(
                    openforms.config.models.config._render,
                    *("emails/co_sign/request.html",),
                    **{},
                ),
                help_text="Content of the co-sign request email. The available template variables are: 'form_name', 'form_url' and 'code'.",
                null=True,
                validators=[
                    openforms.template.validators.DjangoTemplateValidator(
                        backend="openforms.template.openforms_backend"
                    ),
                    openforms.emails.validators.URLSanitationValidator(),
                ],
                verbose_name="co-sign request template",
            ),
        ),
        migrations.RunPython(
            set_correct_default_templates,
            migrations.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="globalconfiguration",
            name="show_form_link_in_cosign_email",
        ),
    ]
